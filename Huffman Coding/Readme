OVERVIEW:

This is an implementation of Huffman coding algorithm in C++ or C. Huffman coding is a algorithm for doing data compression and it forms the basic idea behind file compression. It is implemented using priority queue data structure visualized as Min Heap

The following four programs implements this algorithm and they communicate with each other via files and pipes:
1. frequencies – prints a table of the occurrence frequencies of characters in data read from stdin.
2. huffman – reads a frequency table from stdin, calculates and prints a table of Huffman codes for each character.
3. encode – using a table of Huffman codes (as generated by huffman), translates data from stdin to the corresponding binary encoded data and prints it to stdout.
4. decode – using a table of Huffman codes (as generated by huffman), translates encoded data from stdin back to the original data and prints it to stdout.

USAGE: COMMAND LINES

Use 'make' command to compile four programs to produce four executable files: frequencies, huffman, decode, encode. 
$ make

frequencies (executable) program then takes a file (e.g. pdf, .txt etc) as an input and outputs a frequency table.
$ cat input | ./frequencies

Output of frequencies program is the input for huffman program which in turn outputs an optimal huffman code. 
$ cat input | ./frequencies | ./huffman > code

The huffman code is then used to encode the input file (to compress the size of the file).  So, frequencies program take code as its command line argument and takes text file as input from stdin and outputs the encoded file (packed binary).
$ cat input | ./encode code > encoded

This encoded file can then be decoded using the huffman code. 
$ cat encoded | ./decode code > decoded

NOTE:
To check whether input and output are same use:
$ cmp input output
